// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vehicle {
  id             String              @id @default(cuid())
  stockNumber    String              @unique
  make           String
  model          String
  year           Int
  price          Float               // Listing price
  cost           Float               // Vehicle purchase cost - NEW FIELD
  mileage        Int
  transmission   String
  exteriorColor  String
  status         Status              @default(AVAILABLE)
  description    String?
  images         String[]    
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  testDrives     TestDrive[]
  soldDate       DateTime?
  soldPrice      Decimal?
  transactions   Transaction[]
  
  // Updated relation field with relation name
  submissions    VehicleSubmission[] @relation("DesiredVehicleRelation")
}


model TestDrive {
  id                  String             @id @default(cuid())
  vehicle             Vehicle            @relation(fields: [vehicleId], references: [id])
  vehicleId           String
  customer            Customer?          @relation(fields: [customerId], references: [id])
  customerId          String?            
  customerName        String
  email               String
  phone               String
  date                DateTime
  time                String
  status              AppointmentStatus  @default(PENDING)
  source              String?
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  reminderSent        Boolean            @default(false)
  cancellationReason  String?
}

model Customer {
  id          String      @id @default(cuid())
  name        String
  email       String      @unique
  phone       String
  source      String?     // Add this field - can be 'WEBSITE', 'WALK_IN', etc.
  notes       String?
  sellTradeRequest Boolean    @default(false)  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  testDrives  TestDrive[]
  transactions Transaction[]
}

model BlockedTimeSlot {
  id        String   @id @default(cuid())
  date      DateTime
  startTime String
  endTime   String
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}

model MonthlyMetric {
  id                    String   @id @default(cuid())
  month                 DateTime @unique
  totalAppointments     Int      @default(0)
  websiteAppointments   Int      @default(0)
  otherAppointments     Int      @default(0)
  totalVehiclesSold     Int      @default(0)
  websiteDriveSales     Int      @default(0)
  otherSourceSales      Int      @default(0)
  totalRevenue          Float    @default(0)  // Total of all sale prices
  totalVehicleCosts     Float    @default(0)  // Total of all costs
  netProfit             Float    @default(0)  
  profitMargin          Float    @default(0) 
  cancelledAppointments Int      @default(0)
  activeInventory       Int      @default(0)
  totalCustomers        Int      @default(0)
  totalVehicles         Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model VehicleSubmission {
  id               String   @id @default(cuid())
  type             String   // 'sell' or 'trade'
  vin              String
  vehicleDetails   Json
  condition        Json
  ownership        String
  desiredVehicleId String?  // Nullable: Only applicable for 'trade' submissions
  desiredVehicle   Vehicle? @relation("DesiredVehicleRelation", fields: [desiredVehicleId], references: [id])
  photoUrls        String[]
  status           String   // PENDING_REVIEW, APPROVED, REJECTED, etc.
  notes            String?  // Added field
  customerInfo     Json?    // Added field (assuming it's a JSON object)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}



model Transaction {
  id           String    @id @default(cuid())
  vehicle      Vehicle   @relation(fields: [vehicleId], references: [id])
  vehicleId    String
  customer     Customer  @relation(fields: [customerId], references: [id])
  customerId   String
  salePrice    Float
  profit       Float
  profitMargin Float
  date         DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
enum Role {
  ADMIN
  SUPERADMIN
}

enum Status {
  AVAILABLE
  SOLD
  RESERVED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}